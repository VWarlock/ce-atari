#include <stdio.h>#include <stdlib.h>#include <string.h>#include "../debug.h"#include "netsettings.h"#define NETWORK_CONFIG_FILE		"/etc/network/interfaces"#define NAMESERVER_FILE			"/etc/resolv.conf"NetworkSettings::NetworkSettings(void){	initNetSettings(&eth0);	initNetSettings(&wlan0);		nameserver = "";}void NetworkSettings::initNetSettings(TNetInterface *neti){	neti->dhcpNotStatic	= true;	neti->address		= "";    neti->netmask		= "";    neti->gateway		= "";		neti->wpaSsid		= "";	neti->wpaPsk		= "";}void NetworkSettings::load(void){	FILE *f = fopen(NETWORK_CONFIG_FILE, "rt");		if(!f) {		Debug::out((char *) "NetworkSettings::load - failed to open network settings file.\n");		return;	}		initNetSettings(&eth0);	initNetSettings(&wlan0);		#define MAX_LINE_LEN	1024	char line[MAX_LINE_LEN];	char tmp[MAX_LINE_LEN];	int ires;		TNetInterface *currentIface = NULL;							// store the settings to the struct pointed by this pointer		while(!feof(f)) {		char *res = fgets(line, MAX_LINE_LEN, f);				// get single line				if(!res) {												// if failed to get the line			break;		}				// found start of iface section?		if(strstr(line, "iface") != NULL) {			if(strstr(line, "eth0") != NULL) {					// found eth0 section?				currentIface = &eth0;				initNetSettings(currentIface);					// clear the struct			}			if(strstr(line, "wlan0") != NULL) {					// found wlan0 section?				currentIface = &wlan0;				initNetSettings(currentIface);					// clear the struct			}					if(!currentIface) {									// it wasn't eth0 and it wasn't wlan0?				continue;			}					if(strstr(line, "inet dhcp") != NULL) {				// dhcp config?				currentIface->dhcpNotStatic = true;			}			if(strstr(line, "inet static") != NULL) {			// static config?				currentIface->dhcpNotStatic = false;			}		}		if(!currentIface) {										// current interface not (yet) set? skip the rest			continue;		}		readString(line, (char *) "address",	currentIface->address);		readString(line, (char *) "netmask",	currentIface->netmask);		readString(line, (char *) "gateway",	currentIface->gateway);		readString(line, (char *) "wpa-ssid",	currentIface->wpaSsid);		readString(line, (char *) "wpa-psk",	currentIface->wpaPsk);	}		fclose(f);		loadNameserver();	dumpSettings();}void NetworkSettings::readString(char *line, char *tag, std::string &val){	char *str = strstr(line, tag);					// find tag position	if(str == NULL) {									// tag not present?		return;	}		int tagLen = strlen(tag);							// get tag length		char tmp[1024];	int ires = sscanf(str + tagLen + 1, "%s", tmp);		// read the value			if(ires != 1) {										// reading value failed?		return;	}	val = tmp;											// store value	if(val.length() < 1) {		return;	}		if(val.at(0) == '"') {								// starts with double quotes? remove them		val.erase(0, 1);	}		int pos = val.rfind("\"");							// find last occurence or double quotes	if(pos != std::string::npos) {						// erase last double quotes		val.erase(pos, 1);	}	}void NetworkSettings::dumpSettings(void){	Debug::out((char *) "Network settings\n");	Debug::out((char *) "eth0:\n");	Debug::out((char *) "      DHCP %d\n", eth0.dhcpNotStatic);	Debug::out((char *) "   address %s\n", (char *) eth0.address.c_str());	Debug::out((char *) "   netmask %s\n", (char *) eth0.netmask.c_str());	Debug::out((char *) "   gateway %s\n", (char *) eth0.gateway.c_str());	Debug::out((char *) "\nwlan0:\n");	Debug::out((char *) "      DHCP %d\n", wlan0.dhcpNotStatic);	Debug::out((char *) "   address %s\n", (char *) wlan0.address.c_str());	Debug::out((char *) "   netmask %s\n", (char *) wlan0.netmask.c_str());	Debug::out((char *) "   gateway %s\n", (char *) wlan0.gateway.c_str());	Debug::out((char *) "  wpa-ssid %s\n", (char *) wlan0.wpaSsid.c_str());	Debug::out((char *) "   wpa-psk %s\n", (char *) wlan0.wpaPsk.c_str());		Debug::out((char *) "\nnameserver %s\n", (char *) nameserver.c_str());}void NetworkSettings::save(void){	FILE *f = fopen(NETWORK_CONFIG_FILE, "wt");		if(!f) {		Debug::out((char *) "NetworkSettings::save - failed to open network settings file.\n");		return;	}		// lo section	fprintf(f, "# The loopback network interface\n");	fprintf(f, "auto lo\n");	fprintf(f, "iface lo inet loopback\n\n");		// eth section	fprintf(f, "# The primary network interface\n");	fprintf(f, "iface eth0 inet ");		if(eth0.dhcpNotStatic) {		fprintf(f, "dhcp\n");	} else {		fprintf(f, "static\n");		    fprintf(f, "address %s\n", (char *) eth0.address.c_str());		fprintf(f, "netmask %s\n", (char *) eth0.netmask.c_str()); 		fprintf(f, "gateway %s\n", (char *) eth0.gateway.c_str());	}	fprintf(f, "\n");		// wlan section	fprintf(f, "# The wireless network interface\n");	fprintf(f, "allow-hotplug wlan0\n");	fprintf(f, "auto wlan0\n\n");	fprintf(f, "iface wlan0 inet ");		if(wlan0.dhcpNotStatic) {		fprintf(f, "dhcp\n");	} else {		fprintf(f, "static\n");		    fprintf(f, "address %s\n", (char *) wlan0.address.c_str());		fprintf(f, "netmask %s\n", (char *) wlan0.netmask.c_str()); 		fprintf(f, "gateway %s\n", (char *) wlan0.gateway.c_str());	}	fprintf(f, "wpa-ssid \"%s\"\n",	(char *) wlan0.wpaSsid.c_str()); 	fprintf(f, "wpa-psk \"%s\"\n",	(char *) wlan0.wpaPsk.c_str());	fprintf(f, "\n");		fclose(f);		saveNameserver();}void NetworkSettings::loadNameserver(void){	FILE *f = fopen(NAMESERVER_FILE, "rt");		if(!f) {		Debug::out((char *) "NetworkSettings::loadNameserver - failed to open settings file.\n");		return;	}		char tmp[1024];	int ires = fscanf(f, "nameserver %s\n", tmp);		if(ires == 1) {		nameserver = tmp;	}		fclose(f);}void NetworkSettings::saveNameserver(void){	FILE *f = fopen(NAMESERVER_FILE, "wt");		if(!f) {		Debug::out((char *) "NetworkSettings::saveNameserver - failed to open settings file.\n");		return;	}		fprintf(f, "nameserver %s\n", (char *) nameserver.c_str());	fclose(f);}		